<?php
namespace Phossa\Route\Collector;

use Phossa\Route\Route;
use Phossa\Route\Context\Result;
use Phossa\Route\Context\Request;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-11 at 11:42:56.
 */
class CollectorPPRTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var CollectorPPR
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new CollectorPPR;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * @covers Phossa\Route\Collector\CollectorPPR::addRoute
     * @expectedException Phossa\Route\Exception\LogicException
     * @expectedExceptionCode Phossa\Route\Message\Message::ROUTE_DISALLOWED
     */
    public function testAddRoute()
    {
        $this->object->addRoute(new Route);
    }

    /**
     * @covers Phossa\Route\Collector\CollectorPPR::matchRoute
     */
    public function testMatchRoute1()
    {
        $result = new Result(new Request(
            'GET', '/controller/action/id/1/name/nick?a=b'
        ));
        if ($this->object->matchRoute($result)) {
            $this->assertEquals('b', $result->getParameter('a'));
            $this->assertEquals('1', $result->getParameter('id'));
            $this->assertEquals('nick', $result->getParameter('name'));
            $this->assertEquals(['controller', 'action'], $result->getHandler());
        } else {
            throw new \Exception('bad');
        }
    }

    /**
     * @covers Phossa\Route\Collector\CollectorPPR::matchRoute
     */
    public function testMatchRoute2()
    {
        $result = new Result(new Request(
            'GET', '/controller/action/id/1/nick?a=b'
        ));
        $this->assertFalse($this->object->matchRoute($result));
        $this->assertEquals(Result::BAD_REQUEST, $result->getStatus());
    }

    /**
     * @covers Phossa\Route\Collector\CollectorPPR::matchRoute
     */
    public function testMatchRoute3()
    {
        $result = new Result(new Request(
            'GET', '/controller?a=b'
        ));
        $this->assertFalse($this->object->matchRoute($result));
    }
}
