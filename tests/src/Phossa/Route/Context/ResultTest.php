<?php
namespace Phossa\Route\Context;

use Phossa\Route\Route;
use Phossa\Route\Status;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-11 at 11:42:58.
 */
class ResultTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Result
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Result(new Request(
            'POST', '/user/list/1234?id=phossa'
        ));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * @covers Phossa\Route\Context\Result::getStatus
     */
    public function testGetStatus()
    {
        $this->assertTrue(Status::NOT_FOUND === $this->object->getStatus());
    }

    /**
     * @covers Phossa\Route\Context\Result::setStatus
     */
    public function testSetStatus()
    {
        $status = Status::MOVED_PERMANENTLY;
        $this->object->setStatus($status);
        $this->assertTrue($status === $this->object->getStatus());
    }

    /**
     * @covers Phossa\Route\Context\Result::getParameter
     */
    public function testGetParameter()
    {
        $this->assertEquals('phossa', $this->object->getParameter('id'));
        $this->assertEquals(['id' => 'phossa'], $this->object->getParameter());
    }

    /**
     * @covers Phossa\Route\Context\Result::setParameter
     * @todo   Implement testSetParameter().
     */
    public function testSetParameter()
    {
        // set scalar
        $this->object->setParameter('name', 'name1');
        $this->assertEquals('name1', $this->object->getParameter('name'));

        // set array
        $this->assertEquals('phossa', $this->object->getParameter('id'));
        $this->object->setParameter(['name' => 'name1', 'id' => 'wow']);
        $this->assertEquals('name1', $this->object->getParameter('name'));
        $this->assertEquals('wow', $this->object->getParameter('id'));
    }

    /**
     * @covers Phossa\Route\Context\Result::getRequest
     */
    public function testGetRequest()
    {
        $this->assertTrue($this->object->getRequest() instanceof Request);
    }

    /**
     * @covers Phossa\Route\Context\Result::setHandler
     */
    public function testSetHandler()
    {
        $this->object->setHandler('test');
        $this->assertTrue('test' === $this->object->getHandler());
    }

    /**
     * @covers Phossa\Route\Context\Result::getHandler
     */
    public function testGetHandler()
    {
        $this->assertTrue(is_null($this->object->getHandler()));
    }


    /**
     * @covers Phossa\Route\Context\Result::setRoute
     * @covers Phossa\Route\Context\Result::getRoute
     */
    public function testSetRoute()
    {
        $route = new Route();
        $this->object->setRoute($route);
        $this->assertTrue($route === $this->object->getRoute());
    }
}
