<?php
namespace Phossa\Route;

use Phossa\Route\Route;
use Phossa\Route\Status;
use Phossa\Route\Collector;
use Phossa\Route\Context\Result;
use Phossa\Route\Context\Request;
use Phossa\Route\Regex\ParserStd;
use Phossa\Route\Context\ResultInterface;
use Phossa\Route\Handler\ResolverAbstract;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-11 at 11:42:55.
 */
class DispatcherTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Dispatcher
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->col = new Collector\Collector(new ParserStd());
        $this->col->addRoute(new Route('GET,POST', '/user[/{name:xd}]',
            function(Result $result) {
                echo sprintf("%d User '%s'",
                    $result->getStatus(), $result->getParameter('name'));
                return true;
            }
        ));

        $this->object = new Dispatcher($this->col, new ResolverAbstract());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * @covers Phossa\Route\Dispatcher::match
     */
    public function testMatch1()
    {
        // match
        $result1 = new Result(new Request('GET', '/user/phossa'));
        $this->object->match($result1);
        $res1 = $this->getPrivateProperty('result');
        $this->assertEquals('phossa', $res1->getParameter('name'));

        // no match
        $result2 = new Result(new Request('GET', '/user2/bingo'));
        if (!$this->object->match($result2)) {
            $res2 = $this->getPrivateProperty('result');
            $this->assertTrue(is_null($res2->getParameter('name')));
        } else {
            throw new \Exception('bad');
        }

        // add another route
        $this->col->addRoute(new Route('GET,POST', '/user\d+[/{name:xd}]'));
        $this->object->match($result2);
        $res3 = $this->getPrivateProperty('result');
        $this->assertEquals('bingo', $res3->getParameter('name'));
    }

    /**
     * @covers Phossa\Route\Dispatcher::dispatch
     */
    public function testDispatch()
    {
        $this->expectOutputString("200 User 'phossa'");
        $result1 = new Result(new Request('GET', '/user/phossa'));
        $this->object->dispatch($result1);
        $res1 = $this->getPrivateProperty('result');
        $this->assertEquals('phossa', $res1->getParameter('name'));
    }

    /**
     * @covers Phossa\Route\Dispatcher::matchUrl
     */
    public function testMatchUrl()
    {
        $this->object->matchUrl('GET', '/user/phossa');
        $res1 = $this->getPrivateProperty('result');
        $this->assertEquals('phossa', $res1->getParameter('name'));
    }

    /**
     * @covers Phossa\Route\Dispatcher::dispatchUrl
     *
     */
    public function testDispatchUrl()
    {
        $this->expectOutputString("200 User 'phossa'");
        $this->object->dispatchUrl('GET', '/user/phossa');
        $res1 = $this->getPrivateProperty('result');
        $this->assertEquals(Status::OK, $res1->getStatus());
    }

    /**
     * @covers Phossa\Route\Dispatcher::addExtension
     */
    public function testAddExtension()
    {
        $this->expectOutputString("BEFORE_MATCH(404) BEFORE_COLL(404) AFTER_COLL(200) AFTER_MATCH(200) BEFORE_DISPATCH(200) BEFORE_ROUTE(200) 200 bingo AFTER_ROUTE(200) AFTER_DISPATCH(200) ");
        $ext = new Extension\SampleExtension();
        $this->col->addExtension($ext);
        $this->object->addExtension($ext);
        $route = new Route('HEAD', '/user[/{name:xd}]',
            function(ResultInterface $result) {
                echo $result->getStatus(). " bingo ";
                return true;
            }
        );
        $route->addExtension($ext);
        $this->col->addRoute($route);
        $this->object->dispatchUrl('HEAD', '/user/phossa');
    }

    /**
     * @covers Phossa\Route\Dispatcher::addCollector
     */
    public function testAddCollector()
    {
        // do PPR at the same time
        $c = new Collector\CollectorPPR();
        $this->object->addCollector($c);

        // do match
        $this->expectOutputRegex("~UNKNOWN HANDLER~");
        $this->object->dispatchUrl('GET', '/admin/user/id/1/name/jack');
        $res1 = $this->getPrivateProperty('result');
        $this->assertEquals('jack', $res1->getParameter('name'));
        $this->assertEquals('1', $res1->getParameter('id'));
    }
}
