<?php

namespace Phossa\Route\Regex;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-10 at 15:38:45.
 */
class ParserStdTest
    extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ParserStd
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ParserStd;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * Call protected/private method of a class.
     *
     * @param string $methodName Method name to call
     * @param array  $parameters Array of parameters to pass into method.
     *
     * @return mixed Method return.
     */
    protected function invokeMethod($methodName, array $parameters = [])
    {
        $reflection = new \ReflectionClass($this->object);
        $method     = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($this->object, $parameters);
    }

    /**
     * getPrivateProperty
     *
     * @param 	string $propertyName
     * @return	the property
     */
    public function getPrivateProperty($propertyName)
    {
        $reflector = new \ReflectionClass($this->object);
        $property  = $reflector->getProperty($propertyName);
        $property->setAccessible(true);

        return $property->getValue($this->object);
    }

    /**
     * @covers Phossa\Route\Regex\ParserStd::parse
     */
    public function testParse1()
    {
        $pattern = '/blog[/{section}][/{year:d}[/{month:d}[/{date:d}]]]';
        $this->assertEquals(
            "/blog(?:/(?<section>[^/]++))?(?:/(?<year>[0-9]++)(?:/(?<month>[0-9]++)(?:/(?<date>[0-9]++))?)?)?", $this->object->parse('', $pattern));
    }

    /**
     * @covers Phossa\Route\Regex\ParserStd::parse
     */
    public function testParse2()
    {
        $pattern = '/blog/{section:xd}/';
        $this->assertEquals("(?<wow>/blog/(?<sectionwow>[^0-9/][^/]*+))",
            $this->object->parse('wow', $pattern));
    }

}
